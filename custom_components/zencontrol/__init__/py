"""The ZenControl integration."""
import asyncio
import logging
from typing import Any, Dict, Optional

from homeassistant.config_entries import ConfigEntry
from homeassistant.core import HomeAssistant, callback
from homeassistant.helpers.dispatcher import async_dispatcher_send

from .config_flow import ZenControlConfigFlow
from .discovery_manager import DiscoveryManager, DISCOVERY_SIGNAL
from .device_abstraction.comms.udp_protocol import ZenUDPProtocol
from .device_abstraction.comms.multicast_protocol import ZenMulticastProtocol
from .device_abstraction.controller import ZenControllerRegistry, ZenController
from .device_abstraction.devices import ZenDevice, ZenLight, ZenSwitch, ZenSensor

_LOGGER = logging.getLogger(__name__)

DOMAIN = "zencontrol"

# Default configuration values
DEFAULT_MULTICAST_GROUP = "239.255.90.67"
DEFAULT_MULTICAST_PORT = 5110
DEFAULT_UDP_PORT = 5108
DEFAULT_DISCOVERY_TIMEOUT = 30

async def async_setup(hass: HomeAssistant, config: Dict[str, Any]) -> bool:
    """Set up the ZenControl component from YAML configuration."""
    if DOMAIN not in config:
        return True
        
    conf = config[DOMAIN]
    
    if not hass.config_entries.async_entries(DOMAIN):
        hass.async_create_task(
            hass.config_entries.flow.async_init(
                DOMAIN,
                context={"source": config_entries.SOURCE_IMPORT},
                data=conf,
            )
        )
    
    return True

async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Set up ZenControl from a config entry."""
    multicast_group = entry.data.get("multicast_group", DEFAULT_MULTICAST_GROUP)
    multicast_port = entry.data.get("multicast_port", DEFAULT_MULTICAST_PORT)
    udp_port = entry.data.get("udp_port", DEFAULT_UDP_PORT)
    discovery_timeout = entry.options.get("discovery_timeout", DEFAULT_DISCOVERY_TIMEOUT)
    
    hub = ZenControlHub(
        hass,
        multicast_group=multicast_group,
        multicast_port=multicast_port,
        udp_port=udp_port,
        discovery_timeout=discovery_timeout
    )
    
    await hub.start()
    hub.discovery_manager = DiscoveryManager(hass, hub)
    
    hass.data.setdefault(DOMAIN, {})
    hass.data[DOMAIN][entry.entry_id] = hub
    
    await hass.config_entries.async_forward_entry_setups(
        entry, ["light", "switch", "binary_sensor"]
    )
    
    await _register_services(hass, hub, entry)
    
    entry.async_on_unload(
        async_dispatcher_connect(
            hass, 
            DISCOVERY_SIGNAL, 
            hub.handle_discovery_event
        )
    )
    
    entry.async_on_unload(
        asyncio.create_task(hub.controller_watchdog())
    )
    
    await hub.discovery_manager.start_discovery(user_initiated=False)
    
    return True

async def async_unload_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Unload a config entry."""
    unload_ok = await hass.config_entries.async_unload_platforms(
        entry, ["light", "switch", "binary_sensor"]
    )
    
    if unload_ok:
        hub = hass.data[DOMAIN].pop(entry.entry_id)
        await hub.stop()
        
    return unload_ok

async def _register_services(hass: HomeAssistant, hub: "ZenControlHub", entry: ConfigEntry):
    # Service implementations from previous version
    pass

class ZenControlHub:
    # Hub implementation from previous version
    pass